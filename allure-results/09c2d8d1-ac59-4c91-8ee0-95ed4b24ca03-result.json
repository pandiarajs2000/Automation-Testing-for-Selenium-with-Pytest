{"name": "To verify the category field should not be edited", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=138.0.7204.184)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff77613e415+77285]\n\tGetHandleVerifier [0x0x7ff77613e470+77376]\n\t(No symbol) [0x0x7ff775f0989c]\n\t(No symbol) [0x0x7ff775f55807]\n\t(No symbol) [0x0x7ff775f8860a]\n\t(No symbol) [0x0x7ff775f52d06]\n\t(No symbol) [0x0x7ff775f88820]\n\t(No symbol) [0x0x7ff775fb087f]\n\t(No symbol) [0x0x7ff775f883e3]\n\t(No symbol) [0x0x7ff775f51521]\n\t(No symbol) [0x0x7ff775f522b3]\n\tGetHandleVerifier [0x0x7ff776421efd+3107021]\n\tGetHandleVerifier [0x0x7ff77641c29d+3083373]\n\tGetHandleVerifier [0x0x7ff77643bedd+3213485]\n\tGetHandleVerifier [0x0x7ff77615884e+184862]\n\tGetHandleVerifier [0x0x7ff77616055f+216879]\n\tGetHandleVerifier [0x0x7ff776147084+113236]\n\tGetHandleVerifier [0x0x7ff776147239+113673]\n\tGetHandleVerifier [0x0x7ff77612e298+11368]\n\tBaseThreadInitThunk [0x0x7ff9dd37e8d7+23]\n\tRtlUserThreadStart [0x0x7ff9de09c34c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"19f85c7a15ecc562dfd1c6a337be05c6\")>, product_id = 'OILLL', qty = '3', rate = '20'\ncategory = 'OILLL'\n\n    @allure.title(\"To verify the category field should not be edited\")\n    @allure.description(\"To verify category qty field should not be allow not string value\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.testcase(\"TC_008\")\n    @allure.story(\"Test Add Row Button\")\n    @pytest.mark.parametrize(\"product_id,qty,rate,category\", [(\"OILLL\",\"3\",\"20\",\"OILLL\")])\n    def test_category_field_validation(driver, product_id, qty, rate,category):\n        print(\"Add row button click..\")\n        logger.info(\"Test Working\")\n        form_page = BillCreation(driver)\n        form_page.page_url()\n        form_page.click_add_row_btn()\n>       form_page.category_field_validate(product_id, qty, rate,category)\n\nTest\\test_bill_creation.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\bill_creation_page.py:128: in category_field_validate\n    self.driver.find_element(*self.category_xpath).clear()\nFrappe-Model-Screen\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:155: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nFrappe-Model-Screen\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFrappe-Model-Screen\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029A168EF9B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...ff77612e298+11368]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff9dd37e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff9de09c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=138.0.7204.184)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff77613e415+77285]\nE       \tGetHandleVerifier [0x0x7ff77613e470+77376]\nE       \t(No symbol) [0x0x7ff775f0989c]\nE       \t(No symbol) [0x0x7ff775f55807]\nE       \t(No symbol) [0x0x7ff775f8860a]\nE       \t(No symbol) [0x0x7ff775f52d06]\nE       \t(No symbol) [0x0x7ff775f88820]\nE       \t(No symbol) [0x0x7ff775fb087f]\nE       \t(No symbol) [0x0x7ff775f883e3]\nE       \t(No symbol) [0x0x7ff775f51521]\nE       \t(No symbol) [0x0x7ff775f522b3]\nE       \tGetHandleVerifier [0x0x7ff776421efd+3107021]\nE       \tGetHandleVerifier [0x0x7ff77641c29d+3083373]\nE       \tGetHandleVerifier [0x0x7ff77643bedd+3213485]\nE       \tGetHandleVerifier [0x0x7ff77615884e+184862]\nE       \tGetHandleVerifier [0x0x7ff77616055f+216879]\nE       \tGetHandleVerifier [0x0x7ff776147084+113236]\nE       \tGetHandleVerifier [0x0x7ff776147239+113673]\nE       \tGetHandleVerifier [0x0x7ff77612e298+11368]\nE       \tBaseThreadInitThunk [0x0x7ff9dd37e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff9de09c34c+44]\n\nFrappe-Model-Screen\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "description": "To verify category qty field should not be allow not string value", "parameters": [{"name": "product_id", "value": "'OILLL'"}, {"name": "qty", "value": "'3'"}, {"name": "rate", "value": "'20'"}, {"name": "category", "value": "'OILLL'"}], "start": 1754929886318, "stop": 1754929895624, "uuid": "0e5c0e3f-1ecf-42f8-a67d-e644a6659504", "historyId": "dc58617436a183e8a794718189ad4559", "testCaseId": "73888a7defdc9244657b11d0f65d9d9b", "fullName": "Test.test_bill_creation#test_category_field_validation", "labels": [{"name": "story", "value": "Test Add Row Button"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Test"}, {"name": "suite", "value": "test_bill_creation"}, {"name": "host", "value": "DESKTOP-D5ES2FE"}, {"name": "thread", "value": "7652-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.test_bill_creation"}], "links": [{"type": "tms", "url": "TC_008", "name": "TC_008"}], "titlePath": ["Test", "test_bill_creation.py"]}